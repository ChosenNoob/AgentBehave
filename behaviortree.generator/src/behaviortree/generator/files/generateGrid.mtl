[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateGrid.
 */]
[module generateGrid('http://www.example.org/behaviortree')]

[import behaviortree::generator::requests::ServicesWrapper /]
[**
 * The documentation of the template generateGrid.
 * @param aBehaviorTree
 */]
[template public generateGrid(bt : BehaviorTree)]
[file ('grid.java', false, 'UTF-8')]
package [getProjectName(bt)/]

import repast.simphony.context.Context;
import repast.simphony.context.space.grid.GridFactory;
import repast.simphony.context.space.grid.GridFactoryFinder;
import repast.simphony.dataLoader.ContextBuilder;
import repast.simphony.random.RandomHelper;
import repast.simphony.space.grid.Grid;
import repast.simphony.space.grid.GridBuilderParameters;
import repast.simphony.space.grid.SimpleGridAdder;
import repast.simphony.space.grid.WrapAroundBorders;

public class [getProjectName(bt)/] implements ContextBuilder<Object> {
	public Context build(Context<Object> context) {
		context.setId("[getProjectName(bt)/]");

		GridFactory gridFactory = GridFactoryFinder.createGridFactory(null);

		Grid<Object> grid = gridFactory.createGrid("grid", context,
				new GridBuilderParameters<Object>(new WrapAroundBorders(),
						new SimpleGridAdder<Object>(), false, [bt.gridLength/], [bt.gridHeight/]));

[comment] Random Agent Placement [/comment]
		[for (entryPoint : EntryPoint | bt.children->filter(EntryPoint))]
		for (int i = 0; i < [entryPoint.agentCount/]; i++) {
			[getClassName(entryPoint)/]	
		}
		[/for]
[comment]		[setFillerAgentCount(bt)/]
		[for (entryPoint : EntryPoint | bt.children->filter(EntryPoint))]
		int [entryPoint.agentName.toLower()/]Left = [entryPoint.agentCount/];
		[/for]
		

		for (int i = 0; i < [bt.gridSize/]; i++) {
			for (int j = 0; j < [bt.gridSize/]; j++) {
				int rand = RandomHelper.nextIntFromTo(0, [bt.children->filter(EntryPoint)->size() - 1/]);
				[let i : Integer = 1]
				[for (entryPoint : EntryPoint | bt.children->filter(EntryPoint))]	
				if (rand == [i - 1/] && [entryPoint.agentName.toLower()/]Left != 0) {
					[entryPoint.agentName/] [entryPoint.agentName.toLower()/]Cell = new [entryPoint.agentName/](grid);
					context.add([entryPoint.agentName.toLower()/]Cell);
					grid.moveTo([entryPoint.agentName.toLower()/]Cell, i, j);
					[entryPoint.agentName.toLower()/]Left--;
				}
				[/for]
				[/let][/comment]
		return context;
	}
}
[/file]
[/template]
